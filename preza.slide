Praktični Go
Što i kako nakon "Hello World"?

Igor Rumiha
CEO, CTO, Programer, Veseli Mačak
igor-rumiha@veseli-macak.net
@irrummi

* Hello world?

Za one koji to još nisu napravili:

.play hello.go

* Sleepsort

.code sleepsort.go /^func main/,/^}/

.code sleepsort.go /^func sleepsort/,/^}/

* Sleepsort

.code sleepsort.go /^func collectResults/,/^}/

* Sleepsort

.play sleepsort.go /^func main/,/^}/

* Natrag u stvarni svijet

* Instalacija Go okruženja

- golang.org - uvijek najnovije verzije, za Windows platformu jedino rješenje

- paketni sustavi - apt, yum, itd. - kasne i nekoliko verzija, no možete koristiti neslužbene repozitorije

- Gentoo linux, Arch linux, OS X: homebrew - razumno brzo se pojavljuju nove verzije

* Go alati

.code go-installation.txt

.code go-tools.txt

* Go alati

Cijeli zoološki vrt pun čudnih imena

- compiler *c (5c, 6c, 8c), *g (5g, 6g, 8g)
- assembler *a (5a, 6a, 8a)
- linker *l (5l, 6l, 8l)

Detalji na [[https://golang.org/cmd/]]

Svi važni Go alati objedinjeni su pod "go" alat.

Često korištene "go" naredbe:

- go get
- go build
- go run
- go fmt

* GOPATH

- globalni "workspace" za sav Go kod, i vaš i od drugih programera.

- moj GOPATH: 

.code my-gopath.txt

* GOPATH

.code my-gopath-contents.txt

* Go package sustav

- zamišljen kao efikasnija zamjena za C/C++ include direktive + linkanje.

- cilj je postignut: prevođenje Go koda je nemjerljivo brže od C i C++ koda.

* Importi

.code import_demo.go /^import/,/^\)/

.play import_demo.go /^func main/,/^}/

* Što se desilo?

- u datoteci `$GPOPATH/src/github.com/irumiha/preza/intro/intro.go`:

.code intro/intro.go

- nepisano je pravilo da package imenujemo jednako kao i zadnja komponenta u stazi datoteke, ali ništa nas ne sprečava da koristimo različita imena. 

* Relativni importi (van GOPATH-a)

.play relativepath.go

* Što se dešava pri pokretanju aplikacije

- import svih paketa iz main
- rekurzivno import svih paketa koje ti paketi importaju
.image Imports.png _ 700
- incijalizacija svih toplevel konstanti i varijabli
- pozivanje init() funkcija
- pozivanje main() funkcije u main paketu

* Zgodna primjena init() funkcija

.code import_init.txt /\/\/ image/,/^\)/

.code import_init.txt /\/\/ database/,/^\)/

* Kako raditi projekte u $GOPATH

- Go projekti nemaju "uobičajenu" bin, doc, etc, lib, src itd. strukturu

- Go team preporuča (zapravo propisuje) korištenje samo jednog $GOPATH-a na računalu

- preporuča se korištenje nekog domain prefiksa - preporučljivo je da to bude staza za `go get` alat

.code gopkg.txt

* Vendoring

- go get i github.com kao najpopularnija kombinacija distribucije Go koda rade super dok radite razvoj.

- što se dešava nakon 2 godine kad poželite ponovno kompajlirati vaš kod?

- API paketa koje ste koristili su se promijenili

- neki paketi više i ne postoje

- rješenje (u nastajanju): vendoring i import path rewriting

* Vendoring 

- alati nastali u Go zajednici (trenutno popularni su "godep" i "nut")
- smjesti kopije vaših dependencija u poddirektorij vašeg projekta,
- snime se metapodaci kao git revizija ili tag i sl.
- pomažu u podešavanju $GOPATH varijable da se koristi lokalna kopija.


* Vendoring

- ako ste se odlučili za *import*path*rewriting* tada source vaših depencencija postaje "vaš".

- import izgleda ovako:

.code vendored_rewritten.txt


Vaš workflow će morati uključivati povremeno pokretanje vendoring alata koji će osvježiti svoje metapodatke ili napraviti nove kopije koda ako ste dodavali dependencije

* Alternativni pristupi build proceduri

- Makefile!

- lokalno kreiranje $GOPATH okruženja

- kakvo god rješenje bilo, uključivat će nekakvi oblik vendoringa.

* Go doc

- Go alati uključuju i generator dokumentacije:

.code godoc_tool.txt

- rezultat je mini site po dizajnu sličan golang.org, koji sadrži tutoriale i standardnu dokumentaciju ali i dokumentaciju svih paketa koje ste vi napravili ili naknadno instalirali u $GOPATH

- kako dokumentirati objašnjeno je na [[http://blog.golang.org/godoc-documenting-go-code]]

* Go test

- testovi se tipično pišu u istom packageu u kojem je kod koji se testira
- u datoteku *_test.go smjeste se test funkcije čije ime mora počinjati sa Test i moraju primati samo jedan argument tipa `t *testing.T`

- go test alat se stalno razvija (u verziji 1.4 dobio je coverage feature)

- go test ima mnogo opcija, istražite ih!

* Go test

.code testex.go

* Ostalo: error vrijednosti

* Exceptioni - zašto

- "elegantan" postupak za tretiranje grešaka
- svi smo naučeni na exceptione iz ostalih mainstream jezika

* Exceptioni - zašto ne

- funkcije prestaju biti referencijalno transparentne - vrlo važan koncept ako se želite stilom programiranja približiti funkcionalnom programiranju
- pojam "referentially transparent" znači da funkcija uz isti ulaz uvijek daje isti izlaz
- funkcija koja "baca" exception ne samo da povremeno vraća različite rezultate već ponekad vraća rezultate različitog tipa!

- nisu type-safe

* errors - osnove

.code error_interface.go
.code errors.go

* panic/recover

- mehanizam koji Go-u daje exception-like ponašanje
.code panic_recover.go

* errors - lista za čitanje

- [[http://blog.golang.org/error-handling-and-go]]
- [[https://justinas.org/best-practices-for-errors-in-go/]]
- [[https://groups.google.com/forum/#!topic/golang-nuts/HOXNBQu5c-Q%5B1-25%5D]]

* Go iznenađenja

- go call by value semantika
- range operator stvara kopije objekata 
- multicore: bez dodatnih opcija ili koda vaš Go program neće koristiti više od jedne CPU jezgre

* Go pozitivna iznenađenja

Interfaces.
Može ih se koristiti na 100 načina:

- elegantno "spajanje" funkcionalnosti vašeg programa
- dependency injection
- testiranje (mocking funkcionalnost)

Potreba za resursima (memorija, CPU).

Gušt u programiranju :)

